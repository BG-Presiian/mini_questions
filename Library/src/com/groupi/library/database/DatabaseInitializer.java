package com.groupi.library.database;

import java.io.IOException;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * This class should be used only once in the main app to ensure the proper tables are initialized.
 * @author Sarah Hansen
 *
 */
public class DatabaseInitializer extends DatabaseConnection {

	public DatabaseInitializer() throws SQLException, IOException {
		super(); 
	}
	
	/**
	 * This method makes sure the tables are in the database, and initializes them if not.
	 * Is this the best way to do this? Not sure, but it's what we have right now. 
	 * @throws SQLException
	 */
	public void makeTables() throws SQLException {
		Statement st = con.createStatement();
		
		//String query = "DROP TABLE IF EXISTS User, Book, User_Book;";
		//st.addBatch(query);
		
		String query = "CREATE TABLE IF NOT EXISTS User "
				+ "(UserId INT NOT NULL AUTO_INCREMENT PRIMARY KEY, "
				+ "Username VARCHAR(255), "
				+ "EncryptedPassword VARCHAR(255), "
				+ "LoggedIn BOOL, "
				+ "UniqueID VARCHAR(255)" //the UUID string generated by Java
				+ ");";
		st.addBatch(query);
		query = "CREATE TABLE IF NOT EXISTS Book "
				+ "(BookId INT NOT NULL AUTO_INCREMENT PRIMARY KEY, "
				+ "Title VARCHAR(255), "
				+ "Author VARCHAR(255), "
				+ "PublicationDate DATE,"
				+ "OnHold BOOL DEFAULT 0, "
				+ "LentOut BOOL DEFAULT 0, "
				+ "DueBack DATE, "
				+ "UniqueId VARCHAR(255) " //the UUID string generated by Java
				+ ");";
		st.addBatch(query);
		query = "CREATE TABLE IF NOT EXISTS User_Book"
				+ "(PersonId INT NOT NULL, "
				+ "BookId INT NOT NULL, "
				+ "PRIMARY KEY(PersonId, BookId)"
				+ ");";
		st.addBatch(query);
		int[] rs = st.executeBatch();
		
		if (rs != null) {
		System.out.println("Tables added successfully.");
		} else {
			System.out.println("Table add attempt failed.");
		}
		
		con.close();
		
	}

}
